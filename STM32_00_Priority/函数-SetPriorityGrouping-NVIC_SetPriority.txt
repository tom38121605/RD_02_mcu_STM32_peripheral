
#define NVIC_PriorityGroup_0     0x700 
#define NVIC_PriorityGroup_1     0x600 
#define NVIC_PriorityGroup_2     0x500 
#define NVIC_PriorityGroup_3     0x400 
#define NVIC_PriorityGroup_4     0x300 

#define  SCB_AIRCR_VECTKEY_Pos                16
#define SCB_AIRCR_VECTKEY_Msk                ffff << 16

#define SCB_AIRCR_PRIGROUP_Pos              8
#define SCB_AIRCR_PRIGROUP_Msk             (7<<8)      //#include "core_cm3.h"

#define   __NVIC_PRIO_BITS                        4   //有的型号是2


--------------------------------------------------设置优先级分组------------------------------------------------------------


HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
 
     NVIC_SetPriorityGrouping(PriorityGroup);
 
-------

//bit31-16=5FA, 写入解锁码 （后面的分组设置才能有效写入）， bit10-8=PriorityGroup，设置优先级分组
//参数： NVIC_PriorityGroup2 （0x05 ）
__STATIC_INLINE void __NVIC_SetPriorityGrouping( PriorityGroup)
 
    uint32_t reg_value;
    uint32_t PriorityGroupTmp = (PriorityGroup & 0x07 );        //bit2-0    

    reg_value  =  SCB->AIRCR;                       
                          
    //reg_value &= ~( (SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); 
         reg_value &= ~( ffff<<16 | 7<<8 );  //bit31-16=0, bit10-8=0   //清零解锁码，清零优先级分组

    //reg_value  =   reg_value  |  ( 0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |   (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  ;    
        reg_value  =   reg_value  |  ( 0x5FA  <<16) |   (PriorityGroupTmp << 8)  ;    //bit31-16=5FA, bit10-8=PriorityGroupTmp    //写入解锁码，设置优先级分组
       
    SCB->AIRCR =  reg_value;
 


--------------------------------------------------设置抢占优先级，和子级响应优先级------------------------------------------------------------

//参数：EXTI0, 1 , 0
HAL_NVIC_SetPriority(IRQn_Type IRQn,   PreemptPriority,  SubPriority)
 
    //prioritygroup = NVIC_GetPriorityGrouping();   //=0x05
    //     prioritygroup =(SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos ;
            prioritygroup =(SCB->AIRCR & （7<<8） ) >> 8;

    itemp = NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority);

    NVIC_SetPriority(IRQn, itemp );
 

--------

//参数： 5， 1， 0
uint32_t NVIC_EncodePriority (  PriorityGroup, PreemptPriority,   SubPriority)
 
    uint32_t PriorityGroupTmp =  PriorityGroup &  0x07 ;    
    uint32_t PreemptPriorityBits;
    uint32_t SubPriorityBits;

    //PreemptPriorityBits = ( (7 - PriorityGroupTmp) >  __NVIC_PRIO_BITS ) ?  __NVIC_PRIO_BITS :  (7   - PriorityGroupTmp);
         PreemptPriorityBits =   (7   - PriorityGroupTmp) = 7 - 5 = 2;

    //SubPriorityBits     = ( (PriorityGroupTmp +  __NVIC_PRIO_BITS ) < 7 ) ?  0  : ( (PriorityGroupTmp - 7 ) + __NVIC_PRIO_BITS) ;
          SubPriorityBits     =    (PriorityGroupTmp - 7 ) + __NVIC_PRIO_BITS = （5-7 ） + 4 =2 ;


     //iPriorsub  =   SubPriority  & ( (1  << SubPriorityBits ) - 1 )；
          iPriorsub  =   0  & ( (1  << 2 ) - 1 )；

     //iPrior =   ( PreemptPriority & ( (1  << PreemptPriorityBits) - 1 ) )  << SubPriorityBits；
          iPrior =   ( 1 & ( (1  << 2) - 1 )  )  << 2；

   return  iPrior  | iPriorsub；

--------------


 __NVIC_SetPriority(IRQn_Type IRQn,  priority)
 
    if ((IRQn) >= 0) 
        NVIC->IP[IRQn] =((priority << (8 - __NVIC_PRIO_BITS)) &0xFF);
 
    else 
        SCB->SHP[ ( IRQn& 0xF )-4 ] = ((priority << (8  - __NVIC_PRIO_BITS)) & 0xFF );
 


=============================C011-中断向量表==================================


typedef enum
{
/******  Cortex-M0+ Processor Exceptions Numbers ***************************************************************/
  NonMaskableInt_IRQn         = -14,    /*!< 2 Non Maskable Interrupt                                          */
  HardFault_IRQn              = -13,    /*!< 3 Cortex-M Hard Fault Interrupt                                   */
  SVCall_IRQn                 = -5,     /*!< 11 Cortex-M SV Call Interrupt                                     */
  PendSV_IRQn                 = -2,     /*!< 14 Cortex-M Pend SV Interrupt                                     */
  SysTick_IRQn                = -1,     /*!< 15 Cortex-M System Tick Interrupt                                 */
/******  STM32C0xxxx specific Interrupt Numbers ****************************************************************/
  WWDG_IRQn                   = 0,      /*!< Window WatchDog Interrupt                                         */
  RTC_IRQn                    = 2,      /*!< RTC interrupt through the EXTI line 19 & 21                       */
  FLASH_IRQn                  = 3,      /*!< FLASH global Interrupt                                            */
  RCC_IRQn                    = 4,      /*!< RCC global Interrupt                                              */
  EXTI0_1_IRQn                = 5,      /*!< EXTI 0 and 1 Interrupts                                           */
  EXTI2_3_IRQn                = 6,      /*!< EXTI Line 2 and 3 Interrupts                                      */
  EXTI4_15_IRQn               = 7,      /*!< EXTI Line 4 to 15 Interrupts                                      */
  DMA1_Channel1_IRQn          = 9,      /*!< DMA1 Channel 1 Interrupt                                          */
  DMA1_Channel2_3_IRQn        = 10,     /*!< DMA1 Channel 2 and Channel 3 Interrupts                           */
  DMAMUX1_IRQn                = 11,     /*!< DMAMUX Interrupts                                                 */
  ADC1_IRQn                   = 12,     /*!< ADC1 Interrupts                                                   */
  TIM1_BRK_UP_TRG_COM_IRQn    = 13,     /*!< TIM1 Break, Update, Trigger and Commutation Interrupts            */
  TIM1_CC_IRQn                = 14,     /*!< TIM1 Capture Compare Interrupt                                    */
  TIM3_IRQn                   = 16,     /*!< TIM3 global Interrupt                                             */
  TIM14_IRQn                  = 19,     /*!< TIM14 global Interrupt                                            */
  TIM16_IRQn                  = 21,     /*!< TIM16 global Interrupt                                            */
  TIM17_IRQn                  = 22,     /*!< TIM17 global Interrupt                                            */
  I2C1_IRQn                   = 23,     /*!< I2C1 Interrupt  (combined with EXTI 23)                           */
  SPI1_IRQn                   = 25,     /*!< SPI1 Interrupt                                                    */
  USART1_IRQn                 = 27,     /*!< USART1 Interrupt                                                  */
  USART2_IRQn                 = 28,     /*!< USART2 Interrupt                                                  */
} IRQn_Type;



